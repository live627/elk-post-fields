<?php

/**
 * @package   PostFields
 * @version   2.0
 * @author    John Rayes <live627@gmail.com>
 * @copyright Copyright (c) 2011-2016, John Rayes
 * @license   proprietary
 */

namespace ElkArte\addons\PostFields;

interface PostFields
{
    /*
     * Constructs the field.
     *
     * @param array $field The field as returned by {@link getFields()}.
     * @param string $value Field value.
     * @param bool $exists Whether the value exists/is not empty.
     * @access public
     * @return void
     */
    public function __construct($field, $value, $exists);

    /*
     * Sets the input so the user can enter a value.
     * Sets the output.
     *
     * @access public
     * @return void
     */
    public function setHtml();

    public function validate();
}

abstract class PostFieldsBase extends Ohara implements PostFields
{
    public $name = 'error_pf';
    public $input_html;
    public $output_html;
    protected $field;
    protected $value;
    protected $err;
    protected $exists;

    public function __construct($field, $value, $exists)
    {
        $this->field = $field;
        $this->value = $value;
        $this->exists = $exists;
        $this->err = false;
    }

    /*
     * Gets the error generated by the validation method.
     *
     * @access public
     * @return mixed The error string or false for no error.
     */
    public function getError()
    {
        if ($this->err === true) {
            $err = trim(strpbrk(static::class, '_'), '_').'_invalid_value';
            if ($this->text($err) !== false) {
                $this->err = ['pf_'.$err, $this->field['name']];
            } else {
                $this->err = ['pf_invalid_value', $this->field['name']];
            }
        }

        return $this->err;
    }

    /*
     * Gets the value. This method may be overridden if a specific field type must be sanitized.
     *
     * @access public
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Returns the input so the user can enter a value.
     *
     * @access public
     * @return string
     */
    public function getInputHtml()
    {
        return $this->input_html;
    }

    /**
     * Returns the output. It's the field's value formatted acccording to its criteria.
     *
     * @access public
     * @return string
     */
    public function getOutputHtml()
    {
        return $this->output_html;
    }
}

class PostFields_text extends PostFieldsBase
{
    public function setHtml()
    {
        $this->output_html = $this->value;
        $this->input_html =
            '<input type="text" name="postfield['.$this->field['id_field'].']" '.(!empty($this->field['length']) ? 'maxlength="'.$this->field['length'].'"' : '').' value="'.$this->value.'">';
    }

    public function validate()
    {
        if (!empty($this->field['length'])) {
            $value = substr($this->value, 0, $this->field['length']);
        }
        $class_name = __NAMESPACE__.'\\postFieldMask_'.$this->field['mask'];
        if (!class_exists($class_name)) {
            Errors::instance()->fatal_error(
                'Mask "'.$this->field['mask'].'" not found for field "'.$this->field['name'].'" at ID #'.$this->field['id_field'].'.',
                false
            );
        }
        $mask = new $class_name($this->value, $this->field);
        $mask->validate();
        if (false !== ($err = $mask->getError())) {
            $this->err = $err;
        }
    }
}

class PostFields_textarea extends PostFields_text
{
    public function setHtml()
    {
        $this->output_html = $this->value;
        list ($rows, $cols) = json_decode($this->field['default_value']);
        $this->input_html =
            '<textarea name="postfield['.$this->field['id_field'].']" rows="10" cols="50">'.$this->value.'</textarea>';
    }
}

class PostFields_check extends PostFieldsBase
{
    public function setHtml()
    {
        global $txt;

        $true = (!$this->exists && $this->field['default_value']) || $this->value;
        $this->input_html =
            '<input type="checkbox" name="postfield['.$this->field['id_field'].']"'.($true ? ' checked' : '').'>';
        $this->output_html = $true ? $txt['yes'] : $txt['no'];
    }

    public function validate()
    {
        // Nothing needed here, really. It's just a get out of jail
        // free card. "This card may be kept until needed, or sold."
    }

    public function getValue()
    {
        return $this->exists ? 1 : 0;
    }
}

class PostFields_select extends PostFieldsBase
{
    public function setHtml()
    {
        $this->input_html = '<select name="postfield['.$this->field['id_field'].']">';
        foreach (json_decode($this->field['options']) as $v) {
            $true = (!$this->exists && $this->field['default_value'] == $v) || $this->value == $v;
            $this->input_html .= '<option'.($true ? ' selected' : '').'>'.$v.'</option>';
            if ($true) {
                $this->output_html = $v;
            }
        }
        $this->input_html .= '</select>';
    }

    public function validate()
    {
        $found = false;
        $opts = array_flip(json_decode($this->field['options']));
        if (isset($this->value, $opts[$this->value])) {
            $found = true;
        }
        if (!$found) {
            $this->err = true;
        }
    }

    public function getValue()
    {
        $value = $this->field['default_value'];
        $opts = array_flip(json_decode($this->field['options']));
        if (isset($this->value, $opts[$this->value])) {
            $value = $this->value;
        }

        return $value;
    }
}

class PostFields_radio extends PostFields_select
{
    public function setHtml()
    {
        $this->input_html = '<fieldset>';
        foreach (json_decode($this->field['options']) as $v) {
            $true = (!$this->exists && $this->field['default_value'] == $v) || $this->value == $v;
            $this->input_html .= '<label><input type="radio" name="postfield['.$this->field['id_field'].']"'.($true ? ' checked' : '').' value="'.$v.'"> '.$v.'</label><br>';
            if ($true) {
                $this->output_html = $v;
            }
        }
        $this->input_html .= '</fieldset>';
    }
}

interface postFieldMask
{
    /**
     * @return void
     */
    public function __construct($value, $field);

    public function validate();
}

abstract class postFieldMaskBase implements postFieldMask
{
    protected $value;
    protected $field;
    protected $err;

    public function __construct($value, $field)
    {
        $this->value = $value;
        $this->field = $field;
        $this->err = false;
    }

    public function getError()
    {
        global $txt;

        if ($this->err === true) {
            $err = 'pf_'.trim(strpbrk(static::class, '_'), '_').'_invalid_value';
            if (isset($txt['error_'.$err])) {
                $this->err = [$err, $this->field['name']];
            } else {
                $this->err = ['pf_invalid_value', $this->field['name']];
            }
        }

        return $this->err;
    }
}

class postFieldMask_email extends postFieldMaskBase
{
    public function validate()
    {
        require_once(__DIR__.'/Punycode.php');
        if (!filter_var((new \TrueBV\Punycode\Punycode)->encode($this->value), FILTER_VALIDATE_EMAIL)) {
            $this->err = true;
        }
    }
}

class postFieldMask_regex extends postFieldMaskBase
{
    public function validate()
    {
        if (!preg_match($this->field['regex'], $this->value)) {
            if (!empty($this->field['err'])) {
                $this->err = $this->field['err'];
            }
        } else {
            $this->err = true;
        }
    }
}

class postFieldMask_number extends postFieldMaskBase
{
    public function validate()
    {
        if (filter_var($this->value, FILTER_VALIDATE_INT) === false) {
            $this->err = true;
        }
    }
}

class postFieldMask_float extends postFieldMaskBase
{
    public function validate()
    {
        if (filter_var($this->value, FILTER_VALIDATE_FLOAT) === false) {
            $this->err = true;
        }
    }
}

class postFieldMask_nohtml extends postFieldMaskBase
{
    public function validate()
    {
        if (strip_tags($this->value) != $this->value) {
            $this->err = true;
        }
    }
}
